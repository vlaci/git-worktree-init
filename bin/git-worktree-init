#!/usr/bin/env bash

set -euo pipefail

gitconfig () {
    git config --file .gitworktrees "$@"
}


listconfig () {
    while read -r; do
        echo "${REPLY%.*}"
    done < <(gitconfig --name-only --get-regexp "worktree\..*\.path")
}

setuptree () {
    local tree=$1

    local ref=
    ref="$(gitconfig "$tree.ref" || true)"
    local path=
    path="$(gitconfig "$tree.path" || true)"

    [[ -n $ref ]] || { echo "'$t.ref' entry is missing"; exit 1; }
    [[ -n $path ]] || { echo "'$t.path' entry is missing"; exit 1; }

    if [[ -e "$path/.git" ]]; then
        local current_ref=
        current_ref=$(GIT_DIR=$path/.git git rev-parse --abbrev-ref HEAD)
        if [[ "$(git worktree list --porcelain)" == *"$path"* ]]; then
            if [[ "$current_ref" != "$ref" ]]; then
                GIT_DIR=$path/.git git checkout "$ref"
            fi
        else
            echo "Existing path '$path' is not a worktree"
            exit 1
        fi
    else
        if [[ "$(git worktree list --porcelain)" == *"$path"* ]]; then
            echo "Removing stale worktree configuration"
            git worktree remove "$path"
        fi
        git worktree add "$path" "$ref"
    fi
}

init () {
    worktrees=
    mapfile -t worktrees < <(listconfig)

    for t in  "${worktrees[@]}"; do
        setuptree "$t"
    done
}

register () {
    if > /dev/null gitconfig worktree."$path".path; then
        echo "'$path' is already registered"
        exit 1
    fi
    gitconfig --add worktree."$path".ref "$ref"
    gitconfig --add worktree."$path".path "$path"
}

remove () {
    if ! > /dev/null gitconfig worktree."$path".path; then
        echo "'$path' is not registered"
        exit 1
    fi
    gitconfig --remove-section worktree."$path"

    if [[ "$(git worktree list --porcelain)" == *"$path"* ]]; then
        echo "Removing stale worktree configuration"
        git worktree remove "$path"
    fi
}

showhelp () {
    cat <<EOF
Submodule-like configuration of git worktrees.

Usage:
    git worktree-init [init | -h]
    git worktree-init add <path> <commit-ish>
    git worktree-init remove <path>
EOF
}

action=init

while [ "$#" -gt 0 ]; do
    i="$1"; shift 1

    case "$i" in
        -h)
            showhelp
            exit
            ;;
        init)
            ;;
        add)
            path=$1; shift 1
            ref=$1; shift 1

            action=register
            ;;
        remove)
            path=$1; shift 1

            action=remove
            ;;
        *)
            showhelp
            exit 1
            ;;
    esac
done

$action
